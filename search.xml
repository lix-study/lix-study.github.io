<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>5分钟 修改Gitalk代理地址，解决无法登录问题</title>
      <link href="/2025/10/11/5-fen-zhong-xiu-gai-gitalk-dai-li-di-zhi-jie-jue-wu-fa-deng-lu-wen-ti/"/>
      <url>/2025/10/11/5-fen-zhong-xiu-gai-gitalk-dai-li-di-zhi-jie-jue-wu-fa-deng-lu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="5分钟-修改Gitalk代理地址，解决无法登录问题"><a href="#5分钟-修改Gitalk代理地址，解决无法登录问题" class="headerlink" title="5分钟 修改Gitalk代理地址，解决无法登录问题"></a>5分钟 修改Gitalk代理地址，解决无法登录问题</h1><p>最近心血来潮，也不算吧，一直都有这个想法，只是一直都未付诸行动——搭建个人博客。</p><p>应该暂时还没有经济收入，所以放弃了自建动态个人博客网站，毕竟不仅要花费时间来维护，还要花点小钱，没啥必要~~，所以采用了用使用静态站点生成器（如Hexo）搭建博客。</p><p>但在搭建过程中还是遇到了诸多问题，故记之~~</p><p><strong>问题一：我在使用gitalk来搭建博客评论组件的时候，出现了<code>gitalk network error</code>的提示，忘记保存图片了—-</strong></p><p><strong>出现错误的原因</strong>：是 “Gitalk 向 GitHub OAuth 接口发送请求时，网络连接失败（超时 / 被拦截 / 代理无效）”。查看了一下代码，才发现原来是代码中gitalk的代理已经失效了(这个地址被墙了)，所以得换一个代理。</p><blockquote><p>扩展点：</p><ol><li><a href="#">为什么gittalk需要代理？</a></li><li><a href="#">Gitalk 向 GitHub OAuth 接口发送请求是干什么？</a></li></ol></blockquote><p>如果继续去寻找 免费公共代理服务，不仅花费时间，而且之前使用的公共代理（如 <code>netnr-proxy.cloudno.de</code>、<code>cors-anywhere.herokuapp.com</code>）常常会因 “请求限流”“服务端故障” 或 “域名失效”，导致 Gitalk 的 OAuth 请求超时。</p><p>所以能够长期稳定的不出错，建议<strong>自建 CORS proxy</strong>：</p><ol><li>克隆 <a href="https://github.com/Rob--W/cors-anywhere">cors-anywhere</a> 仓库；</li><li>部署到自己的服务器（如 Vercel、Cloudflare Workers）；</li><li>将 Gitalk 的 <code>proxy</code> 指向自建域名（如 <code>https://your-proxy-domain.com/https://github.com/login/oauth/access_token</code>）。</li></ol><h2 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h2><p>这里采用<code>Cloudflare Workers</code>来实现</p><p><a href="%5B%E4%BD%BF%E7%94%A8Cloudflate%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%E8%8A%82%E7%82%B9%5D(https://blog.eimoon.com/p/%E4%BD%BF%E7%94%A8cloudflate%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%E8%8A%82%E7%82%B9/)">Cloudflare Workers的简介，前期注册过程可看</a></p><ol><li><strong>创建 Workers</strong>：登录 <a href="https://dash.cloudflare.com/">Cloudflare 控制台</a> → 左侧 “Workers 和 Pages” → “创建应用程序” → “创建 Worker”，命名后点击 “部署”。</li></ol><ol start="2"><li>选择worker中的拖放文件</li></ol><ol start="3"><li>创建一个js文件，<strong>粘贴以下代理代码</strong>（记得替换 <code>client_id</code> 和 <code>client_secret</code> 为你自己的 GitHub OAuth 信息）</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">fetch</span>(<span class="params">request</span>) {</span><br><span class="line">    <span class="keyword">const</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>);</span><br><span class="line">    <span class="comment">// 只处理 /get_accesstoken 路径</span></span><br><span class="line">    <span class="keyword">if</span> (url.<span class="property">pathname</span> !== <span class="string">"/get_accesstoken"</span>) {</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">"Not Found"</span>, { <span class="attr">status</span>: <span class="number">404</span> });</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 处理 OPTIONS 预检请求（浏览器跨域前会先发这个请求）</span></span><br><span class="line">    <span class="keyword">if</span> (request.<span class="property">method</span> === <span class="string">"OPTIONS"</span>) {</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="literal">null</span>, {</span><br><span class="line">        <span class="attr">status</span>: <span class="number">204</span>, <span class="comment">// 成功但无内容</span></span><br><span class="line">        <span class="attr">headers</span>: {</span><br><span class="line">          <span class="string">"Access-Control-Allow-Origin"</span>: <span class="string">"*"</span>, <span class="comment">// 允许所有域名跨域（也可指定你的博客域名，更安全）</span></span><br><span class="line">          <span class="string">"Access-Control-Allow-Methods"</span>: <span class="string">"POST, OPTIONS"</span>, <span class="comment">// 允许的请求方法</span></span><br><span class="line">          <span class="string">"Access-Control-Allow-Headers"</span>: <span class="string">"Content-Type"</span>, <span class="comment">// 允许的请求头</span></span><br><span class="line">        },</span><br><span class="line">      });</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 处理 POST 请求（Gitalk 实际发的请求）</span></span><br><span class="line">    <span class="keyword">if</span> (request.<span class="property">method</span> === <span class="string">"POST"</span>) {</span><br><span class="line">      <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">const</span> { code } = <span class="keyword">await</span> request.<span class="title function_">json</span>(); <span class="comment">// 解析 Gitalk 传来的临时授权码</span></span><br><span class="line">        <span class="keyword">if</span> (!code) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">"缺少 code 参数"</span>, { <span class="attr">status</span>: <span class="number">400</span> });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 替换为你自己的 GitHub OAuth 信息</span></span><br><span class="line">        <span class="keyword">const</span> client_id = <span class="string">"Ov23liDLJtbA4MgY0rkZ"</span>;</span><br><span class="line">        <span class="keyword">const</span> client_secret = <span class="string">"f638c999db3724df4e00ea78afa73517069b4110"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向 GitHub 发送请求，兑换 access_token</span></span><br><span class="line">        <span class="keyword">const</span> githubResponse = <span class="keyword">await</span> <span class="title function_">fetch</span>(</span><br><span class="line">          <span class="string">"https://github.com/login/oauth/access_token"</span>,</span><br><span class="line">          {</span><br><span class="line">            <span class="attr">method</span>: <span class="string">"POST"</span>,</span><br><span class="line">            <span class="attr">headers</span>: {</span><br><span class="line">              <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line">              <span class="title class_">Accept</span>: <span class="string">"application/json"</span>,</span><br><span class="line">            },</span><br><span class="line">            <span class="attr">body</span>: <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>({ client_id, client_secret, code }),</span><br><span class="line">          }</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把 GitHub 的响应转发给 Gitalk，并带上跨域头</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="keyword">await</span> githubResponse.<span class="title function_">text</span>(), {</span><br><span class="line">          <span class="attr">headers</span>: {</span><br><span class="line">            <span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">            <span class="string">"Access-Control-Allow-Origin"</span>: <span class="string">"*"</span>, <span class="comment">// 允许跨域</span></span><br><span class="line">          },</span><br><span class="line">        });</span><br><span class="line">      } <span class="keyword">catch</span> (err) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">`错误：<span class="subst">${err.message}</span>`</span>, { <span class="attr">status</span>: <span class="number">500</span> });</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他请求方法（如 GET）返回“方法不允许”</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">"不允许的请求方法"</span>, { <span class="attr">status</span>: <span class="number">405</span> });</span><br><span class="line">  },</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>点击 “保存并部署”，记录生成的域名（如 <code>your-worker-name.cloudflareworkers.com</code>）。</p><ol start="5"><li><strong>修改 Gitalk 配置</strong>：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Gitalk</span>({</span><br><span class="line">  <span class="attr">clientID</span>: <span class="string">"你的clientID"</span>,</span><br><span class="line">  <span class="comment">// clientSecret: "删除这行",</span></span><br><span class="line">  <span class="attr">repo</span>: <span class="string">"你的评论仓库"</span>,</span><br><span class="line">  <span class="attr">owner</span>: <span class="string">"你的GitHub用户名"</span>,</span><br><span class="line">  <span class="attr">admin</span>: [<span class="string">"你的GitHub用户名"</span>],</span><br><span class="line">  <span class="attr">id</span>: <span class="string">"文章标识"</span>,</span><br><span class="line">  <span class="attr">proxy</span>: <span class="string">"https://your-worker-name.cloudflareworkers.com/get_accesstoken"</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><ol start="6"><li>验证建议（可跳过）</li></ol><p>部署 Worker 后，可通过以下方式测试是否生效：</p><ol><li><p>用 Postman 或浏览器控制台，发送 <code>POST</code> 请求到你的 Worker 域名（如 <code>https://xxx.workers.dev/get_accesstoken</code>）。</p></li><li><p>请求体（JSON 格式）带上一个有效的 GitHub 临时授权码（可通过手动触发 Gitalk 登录，抓包获取 <code>code</code>）</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span><span class="attr">"code"</span><span class="punctuation">:</span> <span class="string">"你的临时授权码"</span><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>若返回类似 <code>{"access_token": "...", "token_type": "bearer"}</code> 的结果，说明代理生效。</p></li><li><p>重新部署hexo：`hexo clear &amp;&amp; hexo g &amp;&amp; hexo d “</p></li></ol><p>然后可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Hexo 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Gitalk </tag>
            
            <tag> 个人博客中的优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/10/07/hello-world/"/>
      <url>/2025/10/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
