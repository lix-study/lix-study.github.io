<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>  </title>
      <link href="/2025/10/21/test-wen-ti/"/>
      <url>/2025/10/21/test-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="文章正文开始"><a href="#文章正文开始" class="headerlink" title="文章正文开始"></a>文章正文开始</h1><p>大家好，今天分享 Hexo 博客的两个实用优化技巧…</p><p><img src="image-20251021171736467.png" alt="image-20251021171736467"></p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Hexo 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> SEO </tag>
            
            <tag> RSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA打卡记录</title>
      <link href="/2025/10/21/pta-shua-ti-li-cheng-bei/"/>
      <url>/2025/10/21/pta-shua-ti-li-cheng-bei/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="内容认证失败，但仍可尝试查看。">  <script id="hbeData" type="hbeData" data-hmacdigest="cd33de22989405105a14764aa4775f0007d9655e0f6fdde8dd14672ed33e57af">3027ba6132cefcdf8e3a9ee5f0908ed1e21b22972855576e13693062c22552973e7043d1c64133aa7436bea5fc70bb2f2e9ecf7f25978844490f15af3e732dd0406bb86070d04301b29a0d21720015b0c0663ba7ca039241e1f40c0875862b7852d61f6f7b3d587d3b1703d08f4b8d18ae2163a9fed79008eb59e97696954550e126f2272848100b89195dd492f10fe2b8678ec2524d26d4a4a2f59365b598ba10fb73aa4f6bfd2640824af4c2ff9d1e48a21b82c37c1386d367054430781f2aa5c1498f8c2f55de707de72980775dca650e02f3911d4179de8a112db02a11c07d7c990a715acac4b9d48cbe00d1a1c8252c13756a369010eeef465276203884495052f56a4d8a7835ed73f5f65b3ca06f48a1b05e469d3765e3c97a705c52b1ef115aa27346c19d2930474a1a53b938b661ae0a1ad1842fe3f5db9f6224508147254f980a71c9bb0324f58cd1f43941b528fdeb60bace6703aaeee9cea31016ec23def987050826fb41abd30ff536c0dde00211961abe5298fa558c940423500722a6225e40fcca250e5d9e0a3d4ab52e30b2ce19ee3a9e6b4ade4c235f5096a2f30f44854267ced435d9befd75abc3936c00d0c5dad3fc92b090d464a55e9aa61c00171634150560564135096eacb25c87810db2dd07633a6014220526b8f60f30d234da7ba7896be1d0ed20b3f93c8b7dfbaf6390948247beb8efd8d85f88fb26cc0a5ff8f1e0625fe3415239a554</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看本文。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日常分享 </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常分享 </tag>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>  </title>
      <link href="/2025/10/12/standtard/"/>
      <url>/2025/10/12/standtard/</url>
      
        <content type="html"><![CDATA[<h1 id="文章正文开始"><a href="#文章正文开始" class="headerlink" title="文章正文开始"></a>文章正文开始</h1><p>大家好，今天分享 Hexo 博客的两个实用优化技巧…</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Hexo 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> SEO </tag>
            
            <tag> RSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2025/10/11/testcode/"/>
      <url>/2025/10/11/testcode/</url>
      
        <content type="html"><![CDATA[<h1 id="test代码块功能"><a href="#test代码块功能" class="headerlink" title="test代码块功能"></a>test代码块功能</h1><blockquote><p>111</p></blockquote><p><code>javascript</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token keyword">async</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 只处理 /get_accesstoken 路径</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span>pathname <span class="token operator">!==</span> <span class="token string">"/get_accesstoken"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token string">"Not Found"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">404</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 1. 处理 OPTIONS 预检请求（浏览器跨域前会先发这个请求）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">"OPTIONS"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">204</span><span class="token punctuation">,</span> <span class="token comment">// 成功但无内容</span>        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token string-property property">"Access-Control-Allow-Origin"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token comment">// 允许所有域名跨域（也可指定你的博客域名，更安全）</span>          <span class="token string-property property">"Access-Control-Allow-Methods"</span><span class="token operator">:</span> <span class="token string">"POST, OPTIONS"</span><span class="token punctuation">,</span> <span class="token comment">// 允许的请求方法</span>          <span class="token string-property property">"Access-Control-Allow-Headers"</span><span class="token operator">:</span> <span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token comment">// 允许的请求头</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 2. 处理 POST 请求（Gitalk 实际发的请求）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">"POST"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> code <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> request<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解析 Gitalk 传来的临时授权码</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>code<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token string">"缺少 code 参数"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">400</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 替换为你自己的 GitHub OAuth 信息</span>        <span class="token keyword">const</span> client_id <span class="token operator">=</span> <span class="token string">"Ov23liDLJtbA4MgY0rkZ"</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> client_secret <span class="token operator">=</span> <span class="token string">"f638c999db3724df4e00ea78afa73517069b4110"</span><span class="token punctuation">;</span>        <span class="token comment">// 向 GitHub 发送请求，兑换 access_token</span>        <span class="token keyword">const</span> githubResponse <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>          <span class="token string">"https://github.com/login/oauth/access_token"</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>            <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">,</span>              <span class="token literal-property property">Accept</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span> client_id<span class="token punctuation">,</span> client_secret<span class="token punctuation">,</span> code <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 把 GitHub 的响应转发给 Gitalk，并带上跨域头</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token keyword">await</span> githubResponse<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>          <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>            <span class="token string-property property">"Access-Control-Allow-Origin"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token comment">// 允许跨域</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">错误：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">500</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 其他请求方法（如 GET）返回“方法不允许”</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token string">"不允许的请求方法"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">405</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code> catch (err) {         return new Response(</code>错误：${err.message}`, { status: 500 });<br>      }<br>    }</p><pre><code>// 其他请求方法（如 GET）返回“方法不允许”return new Response("不允许的请求方法", { status: 405 });</code></pre><p>  },<br>};`</p><p><code>java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">hello<span class="token punctuation">,</span>worldtest code<span class="token punctuation">,</span>thanks<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>c++</code></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">hello,worldtest code,thanks<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="image-20251011174457920.png" alt="image-20251011174457920"></p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Hexo 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Gitalk </tag>
            
            <tag> 个人博客中的优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5分钟 修改Gitalk代理地址，解决无法登录问题</title>
      <link href="/2025/10/11/5-fen-zhong-xiu-gai-gitalk-dai-li-di-zhi-jie-jue-wu-fa-deng-lu-wen-ti/"/>
      <url>/2025/10/11/5-fen-zhong-xiu-gai-gitalk-dai-li-di-zhi-jie-jue-wu-fa-deng-lu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="5分钟-修改Gitalk代理地址，解决无法登录问题"><a href="#5分钟-修改Gitalk代理地址，解决无法登录问题" class="headerlink" title="5分钟 修改Gitalk代理地址，解决无法登录问题"></a>5分钟 修改Gitalk代理地址，解决无法登录问题</h1><p>最近心血来潮，也不算吧，一直都有这个想法，只是一直都未付诸行动——搭建个人博客。</p><p>应该暂时还没有经济收入，所以放弃了自建动态个人博客网站，毕竟不仅要花费时间来维护，还要花点小钱，没啥必要~~，所以采用了用使用静态站点生成器（如Hexo）搭建博客。</p><p>但在搭建过程中还是遇到了诸多问题，故记之~~</p><p><strong>问题一：我在使用gitalk来搭建博客评论组件的时候，出现了<code>gitalk network error</code>的提示，忘记保存图片了—-</strong></p><p><strong>出现错误的原因</strong>：是 “Gitalk 向 GitHub OAuth 接口发送请求时，网络连接失败（超时 / 被拦截 / 代理无效）”。查看了一下代码，才发现原来是代码中gitalk的代理已经失效了(这个地址被墙了)，所以得换一个代理。</p><blockquote><p>扩展点：</p><ol><li><a href="#">为什么gittalk需要代理？</a></li><li><a href="#">Gitalk 向 GitHub OAuth 接口发送请求是干什么？</a></li></ol></blockquote><p>如果继续去寻找 免费公共代理服务，不仅花费时间，而且之前使用的公共代理（如 <code>netnr-proxy.cloudno.de</code>、<code>cors-anywhere.herokuapp.com</code>）常常会因 “请求限流”“服务端故障” 或 “域名失效”，导致 Gitalk 的 OAuth 请求超时。</p><p>所以能够长期稳定的不出错，建议<strong>自建 CORS proxy</strong>：</p><ol><li>克隆 <a href="https://github.com/Rob--W/cors-anywhere">cors-anywhere</a> 仓库；</li><li>部署到自己的服务器（如 Vercel、Cloudflare Workers）；</li><li>将 Gitalk 的 <code>proxy</code> 指向自建域名（如 <code>https://your-proxy-domain.com/https://github.com/login/oauth/access_token</code>）。</li></ol><h2 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h2><p>这里采用<code>Cloudflare Workers</code>来实现</p><p><a href="%5B%E4%BD%BF%E7%94%A8Cloudflate%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%E8%8A%82%E7%82%B9%5D(https://blog.eimoon.com/p/%E4%BD%BF%E7%94%A8cloudflate%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%E8%8A%82%E7%82%B9/)">Cloudflare Workers的简介，前期注册过程可看</a></p><ol><li><strong>创建 Workers</strong>：登录 <a href="https://dash.cloudflare.com/">Cloudflare 控制台</a> → 左侧 “Workers 和 Pages” → “创建应用程序” → “创建 Worker”，命名后点击 “部署”。</li></ol><p><img src="image-20251011174457920.png"></p><ol start="2"><li>选择worker中的拖放文件</li></ol><p><img src="image-20251011175625725.png"></p><ol start="3"><li>创建一个js文件，<strong>粘贴以下代理代码</strong>（记得替换 <code>client_id</code> 和 <code>client_secret</code> 为你自己的 GitHub OAuth 信息）</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token keyword">async</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 只处理 /get_accesstoken 路径</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span>pathname <span class="token operator">!==</span> <span class="token string">"/get_accesstoken"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token string">"Not Found"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">404</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 1. 处理 OPTIONS 预检请求（浏览器跨域前会先发这个请求）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">"OPTIONS"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">204</span><span class="token punctuation">,</span> <span class="token comment">// 成功但无内容</span>        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token string-property property">"Access-Control-Allow-Origin"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token comment">// 允许所有域名跨域（也可指定你的博客域名，更安全）</span>          <span class="token string-property property">"Access-Control-Allow-Methods"</span><span class="token operator">:</span> <span class="token string">"POST, OPTIONS"</span><span class="token punctuation">,</span> <span class="token comment">// 允许的请求方法</span>          <span class="token string-property property">"Access-Control-Allow-Headers"</span><span class="token operator">:</span> <span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token comment">// 允许的请求头</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 2. 处理 POST 请求（Gitalk 实际发的请求）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">"POST"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> code <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> request<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解析 Gitalk 传来的临时授权码</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>code<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token string">"缺少 code 参数"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">400</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 替换为你自己的 GitHub OAuth 信息</span>        <span class="token keyword">const</span> client_id <span class="token operator">=</span> <span class="token string">"Ov23liDLJtbA4MgY0rkZ"</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> client_secret <span class="token operator">=</span> <span class="token string">"f638c999db3724df4e00ea78afa73517069b4110"</span><span class="token punctuation">;</span>        <span class="token comment">// 向 GitHub 发送请求，兑换 access_token</span>        <span class="token keyword">const</span> githubResponse <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>          <span class="token string">"https://github.com/login/oauth/access_token"</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>            <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">,</span>              <span class="token literal-property property">Accept</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span> client_id<span class="token punctuation">,</span> client_secret<span class="token punctuation">,</span> code <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 把 GitHub 的响应转发给 Gitalk，并带上跨域头</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token keyword">await</span> githubResponse<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>          <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>            <span class="token string-property property">"Access-Control-Allow-Origin"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token comment">// 允许跨域</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">错误：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">500</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 其他请求方法（如 GET）返回“方法不允许”</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token string">"不允许的请求方法"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">405</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击 “保存并部署”，记录生成的域名（如 <code>your-worker-name.cloudflareworkers.com</code>）。</p><p><img src="image-20251011180049096.png"></p><ol start="5"><li><strong>修改 Gitalk 配置</strong>：</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Gitalk</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">clientID</span><span class="token operator">:</span> <span class="token string">"你的clientID"</span><span class="token punctuation">,</span>  <span class="token comment">// clientSecret: "删除这行",</span>  <span class="token literal-property property">repo</span><span class="token operator">:</span> <span class="token string">"你的评论仓库"</span><span class="token punctuation">,</span>  <span class="token literal-property property">owner</span><span class="token operator">:</span> <span class="token string">"你的GitHub用户名"</span><span class="token punctuation">,</span>  <span class="token literal-property property">admin</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"你的GitHub用户名"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">"文章标识"</span><span class="token punctuation">,</span>  <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token string">"https://your-worker-name.cloudflareworkers.com/get_accesstoken"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>验证建议（可跳过）</li></ol><p>部署 Worker 后，可通过以下方式测试是否生效：</p><ol><li><p>用 Postman 或浏览器控制台，发送 <code>POST</code> 请求到你的 Worker 域名（如 <code>https://xxx.workers.dev/get_accesstoken</code>）。</p></li><li><p>请求体（JSON 格式）带上一个有效的 GitHub 临时授权码（可通过手动触发 Gitalk 登录，抓包获取 <code>code</code>）</p></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token string-property property">"code"</span><span class="token operator">:</span> <span class="token string">"你的临时授权码"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><p>若返回类似 <code>{"access_token": "...", "token_type": "bearer"}</code> 的结果，说明代理生效。</p></li><li><p>重新部署hexo：`hexo clear &amp;&amp; hexo g &amp;&amp; hexo d “</p></li></ol><p>然后可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Hexo 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Gitalk </tag>
            
            <tag> 个人博客中的优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发过程遇到问题的解决经验总结</title>
      <link href="/2025/10/09/kai-fa-guo-cheng-yu-dao-wen-ti-de-jie-jue-jing-yan-zong-jie/"/>
      <url>/2025/10/09/kai-fa-guo-cheng-yu-dao-wen-ti-de-jie-jue-jing-yan-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="开发过程遇到问题的解决经验总结"><a href="#开发过程遇到问题的解决经验总结" class="headerlink" title="开发过程遇到问题的解决经验总结"></a>开发过程遇到问题的解决经验总结</h1><p><strong>一、观察</strong></p><ol><li>先观察问题出现错误的地方和特点</li><li>探究错误出现的原理</li><li>检查是否之前出现相似错误，看是否有解决办法</li><li>如果没有解决办法，再上网搜索相关经验</li></ol><p><strong>二、搜索经验</strong></p><ol><li><p>如果是在github中已经存在的项目，就先到该项目中的issue中看看是有人不是出现了一样的问题</p><p><strong>如果出现了一样的问题</strong></p><ul><li>在讨论区查看是否有效的解决办法</li><li>试验并总结经验</li></ul></li><li><p>进行百度搜索，看是否有相关问题的帖子</p><ul><li>总结经验，观察帖子中出现问题的原因与解决方案</li></ul></li><li><p>针对问题与之前积累的经验，对ai进行特定问题的提问</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Hexo 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> SEO </tag>
            
            <tag> RSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo使用中遇到的问题</title>
      <link href="/2025/10/09/hexo-shi-yong-zhong-yu-dao-de-wen-ti/"/>
      <url>/2025/10/09/hexo-shi-yong-zhong-yu-dao-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo使用过程中遇到的问题"><a href="#hexo使用过程中遇到的问题" class="headerlink" title="hexo使用过程中遇到的问题"></a>hexo使用过程中遇到的问题</h1><h2 id="代码块部分选中的时候会与上一行代码有重叠问题并且不显示行号"><a href="#代码块部分选中的时候会与上一行代码有重叠问题并且不显示行号" class="headerlink" title="代码块部分选中的时候会与上一行代码有重叠问题并且不显示行号"></a>代码块部分选中的时候会与上一行代码有重叠问题并且不显示行号</h2><p>如图所示：</p><p><img src="image-20251012195141522.png" alt="image-20251012195141522"></p><p>解决方案：</p><p>在prism.css文件中</p><p>把 <code>pre[class*=language-].line-numbers&gt;code {  position: relative;  white-space: inherit } </code></p><p>改成 <code>pre[class*=language-].line-numbers&gt;code {  position: sticky;  white-space: inherit } </code></p><p>就解决问题了</p><p><code>sticky</code> 并没有直接修改行高（<code>line-height</code>），而是通过 <strong>优化代码内容在滚动时的定位稳定性</strong>，解决了代码行与行号的错位问题，从而消除了 “行高异常”“全选覆盖前一行” 的视觉效果。这种情况在 “带行号的长代码块” 或 “需要频繁滚动的代码块” 中尤为常见，<code>sticky</code> 恰好弥补了 <code>relative</code> 在滚动场景下的定位缺陷。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Hexo 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/10/07/hello-world/"/>
      <url>/2025/10/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
